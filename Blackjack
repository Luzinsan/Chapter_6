#include <iostream>
#include <cstdlib>
#include <ctime>
#include <array>
#include <string>

void Owl_san();


enum CardRank
{
	RANK_NULL,
	RANK_2,
	RANK_3,
	RANK_4,
	RANK_5,
	RANK_6,
	RANK_7,
	RANK_8,
	RANK_9,
	RANK_10,
	RANK_JACK,
	RANK_QUEEN,
	RANK_KING,
	RANK_ACE,
	RANK_MAX,
	RANK_1_ACE
};
enum CardSuit
{
	SUIT_TREFU,
	SUIT_BYBNU,
	SUIT_CHERVU,
	SUIT_PIKI,
	SUIT_MAX
};
struct Card
{
	CardRank rank;//ранг
	CardSuit suit;//достоинство
};

void menu(std::array<std::array<Card, 52>, 6>& deck, double& purse);

void printRank(const Card& card)
{
	switch (card.rank)
	{
	case RANK_2: std::cout << " 2";  break;
	case RANK_3: std::cout << " 3";  break;
	case RANK_4: std::cout << " 4";  break;
	case RANK_5: std::cout << " 5";  break;
	case RANK_6: std::cout << " 6";  break;
	case RANK_7: std::cout << " 7";  break;
	case RANK_8: std::cout << " 8";  break;
	case RANK_9: std::cout << " 9";  break;
	case RANK_10: std::cout << "10";  break;
	case RANK_JACK: std::cout << " J";  break;
	case RANK_QUEEN: std::cout << " Q";  break;
	case RANK_KING: std::cout << " K";  break;
	case RANK_ACE: std::cout << " A";  break;
	}
}
void printSuit(const Card &card) 
{
	switch (card.suit)
	{
		case SUIT_TREFU: std::cout << "TR";  break;
		case SUIT_BYBNU: std::cout << " B";  break;
		case SUIT_CHERVU: std::cout << "CH";  break;
		case SUIT_PIKI: std::cout << " P";  break;
	}
}
void printCard(const Card &card) 
{
	std::cout << "\t__________________________________\n\t|";
	printRank(card);
	std::cout << "\t\t\t\t  |\n\t|";
	printSuit(card);
	std::cout << "\t\t\t\t  |\n\t|\t\t\t\t  |\n\t|\t\t\t\t  |\n\t|\t\t\t\t  |\n\t|\t\t\t\t  |\n\t|\t\t\t\t  |\n\t|\t\t\t\t";
	printSuit(card);
	std::cout << "|\n\t|_______________________________";
	printRank(card);
	std::cout << "|\n\n\n";
}
void printDeck(const std::array<std::array<Card, 52>, 6> &few_deck)
{
	for(const std::array<Card, 52> &deck : few_deck)
		for (const Card &card : deck)
		{
		printCard(card);
		}
	std::cout << '\n';
}
void swapCard(Card& card1, Card& card2)
{
	Card temp = card1;
	card1 = card2;
	card2 = temp;
}
int64_t getRandomNumber(int64_t min, int64_t max)
{
	static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
	// Равномерно распределяем генерацию случайного числа в диапазоне значений
	return static_cast<int64_t>(rand() * fraction * (max - min + 1) + min);
}
void shuffleDeck(std::array<std::array<Card, 52>, 6> &deck)
{
	for(int d_deck = 0; d_deck < 6; ++d_deck)
		for (int index = 0; index < 52; ++index)
		{
			int64_t randCard = getRandomNumber((int64_t)0, (int64_t)51);
		int64_t randDeck = getRandomNumber(0, 5);
		swapCard(deck[d_deck][index], deck[randDeck][randCard]);
		}
}


int getCardValue(const Card& card)
{
	switch (card.rank)
	{
	case RANK_2:		return 2;
	case RANK_3:		return 3;
	case RANK_4:		return 4;
	case RANK_5:		return 5;
	case RANK_6:		return 6;
	case RANK_7:		return 7;
	case RANK_8:		return 8;
	case RANK_9:		return 9;
	case RANK_10:		
	case RANK_JACK:	    
	case RANK_QUEEN:   
	case RANK_KING:	    return 10;
	case RANK_ACE:		return 11;
	case RANK_1_ACE:	return 1;
	default: return 0; 
	}
}



void money_f(double &money) 
{
	do {
		std::cin >> money;
		std::cin.ignore(32676, '\n');
		if (std::cin.fail())
		{
			std::cin.clear();
			std::cin.ignore(32676, '\n');
		}
	} while (money<100);
}


char question(char &answer,  char x,  char y) 
{
	do{
		std::cin >> answer;
		std::cin.ignore(32676, '\n');
	} while (answer != x && answer != y);
	return answer;
}

int findAce(std::array<Card, 21> &cards) 
{
	int i = 0;
	for (; i < 21; ++i)
	{
		if (cards[i].rank == RANK_ACE)
			return i;
	}
	return i;
}

int Summ(std::array<Card, 21>& cards)
{
	int summ{ 0 };
	
	for (auto &element: cards)
	{
		int rank = getCardValue(element);
		summ += rank;

		//Если на руках есть туз И ---> сумма всех карт превышает 21 - то мы заменяем ПЕРВЫЙ ВСТРЕЧНЫЙ туз на модифицированный туз со значением 1
				//1,11,11 = 23--->1,1,11 = 13 (варианта 11,1,11 просто не может существовать)
		if (summ > 21 && findAce(cards)!= 21)
		{
			cards[findAce(cards)].rank = RANK_1_ACE;
			summ -= 10;
		}
		else if (rank == 0)
			break;
	}
	return summ;
}


void playBlackjack(std::array<std::array<Card, 52>, 6>& deck, double &purse)
{
	std::array<Card, 21> cardsOfGamer = {};
	std::array<Card, 21> cardsOfMachine = {};

	Card* deckCardPtr = &deck[0][0];
	int game{ 0 };

	std::cout << "\n\tYour bet - ";
	double bet;
	
	do {
		
		money_f(bet);
		if (purse < bet)
		{
			std::cout << "You don't have any more money. Get out of here. ";
			menu(deck, purse); 
		}
	} while (bet > purse);
	

	purse -= bet;
	int summCardsOfGamer{ 0 };
	int summCardsOfMachine{ 0 };

	for (int i = 0; i < 2; ++i)
	{
		cardsOfGamer[i] = { deckCardPtr[game++] };
		std::cout << "\n\t\tYour card #" << i+1 << '\n';
		printCard(cardsOfGamer[i]);

		cardsOfMachine[i] = { deckCardPtr[game++] };
		if (i == 0)
		{
			std::cout << "\n\t\tMachin's card #" << i+1 << '\n';
			printCard(cardsOfMachine[i]);
		}
	}
	summCardsOfGamer = { Summ(cardsOfGamer) };
	summCardsOfMachine = { Summ(cardsOfMachine) };
	std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer ;
	

	for (int i = 2; summCardsOfGamer < 21; ++i)
	{
		char answer{};
		std::cout << "\n\tDo you need another card?\tmore----->m\tenough----->e\n\t\t\t\t\t\t     ";
		answer = question(answer, 'm', 'e');
		if (answer == 'm')
		{
			cardsOfGamer[i] = { deckCardPtr[game++] };
			std::cout << "\n\t\tYour card #" << i+1 << '\n';
			printCard(cardsOfGamer[i]);
			summCardsOfGamer = { Summ(cardsOfGamer) };
			std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer;
		}
		else
			break;
	}

	
	if ((summCardsOfGamer == 21) && (getCardValue(cardsOfMachine[0]) > RANK_10))
	{
		std::cout << "\n\t\tHit or Stand?\n\t\thit---->h\tstand---->s\n\t\t\t\t   ";
		char answer{};
		question(answer, 'h', 's');
		if (answer == 'h') 
		{
			purse += (2 * bet);
			std::cout << "\n\tYour winnings are "<<bet<<" from the original bet";
			menu(deck, purse);
		}
		else
		{
			std::cout << "\n\t\tMachin's card #" << 2 << '\n';
			printCard(cardsOfMachine[1]);
			for (int i = 2; summCardsOfMachine <= 26; ++i)
			{
				if (summCardsOfMachine == 21)
				{
					std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer;
					std::cout << "\n\tSumm of machine: " << summCardsOfMachine;
					std::cout << "\n\t\t\tPUSH!!!";
					purse += bet;
					std::cout << "\n\tOkey. Take your loot back.";
					menu(deck, purse);
				}
				else if (summCardsOfMachine > 16)
				{
					std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer;
					std::cout << "\n\tSumm of machine: " << summCardsOfMachine;
					std::cout << "\n\tLucky! you win your tripled bet. This is BLACKJACK!!!";
					std::cout << "\n\t\t------------------------------------------------------------\n\t\t\t╔══╗─╔╗───╔═══╗╔═══╗╔╗╔═╗     ──╔╗╔═══╗╔═══╗╔╗╔═╗\n\t\t 	║╔╗║─║║───║╔═╗║║╔═╗║║║║╔╝     ──║║║╔═╗║║╔═╗║║║║╔╝\n\t\t";
					std::cout << " 	║╚╝╚╗║║───║║─║║║║─╚╝║╚╝╝─     ──║║║║─║║║║─╚╝║╚╝╝─   + WHORES :)\n\t\t 	║╔═╗║║║─╔╗║╚═╝║║║─╔╗║╔╗║─     ╔╗║║║╚═╝║║║─╔╗║╔╗║─\n\t\t 	║╚═╝║║╚═╝║║╔═╗║║╚═╝║║║║╚╗     ║╚╝║║╔═╗║║╚═╝║║║║╚╗\n\t\t";
					std::cout << " 	╚═══╝╚═══╝╚╝─╚╝╚═══╝╚╝╚═╝     ╚══╝╚╝─╚╝╚═══╝╚╝╚═╝\n\t\t-------------------------------------------------------------\n\n";
					system("pause");
					purse += (3 * bet) + bet;
					menu(deck, purse);
				}
				else
				{
					std::cout << "\n\tSumm of machine: " << summCardsOfMachine;
					std::cout << "\n\tThe machine takes another card.";
					cardsOfMachine[i] = { deckCardPtr[game++] };
					std::cout << "\n\t\tMachin's card #" << i+1 << '\n';
					printCard(cardsOfMachine[i]);
					summCardsOfMachine = { Summ(cardsOfMachine) };
				}
			}
		}
	}
	else if (summCardsOfGamer > 21) 
	{
		std::cout << "\n\t\t\tDude! You lost!";
		menu(deck, purse);
	}
	else
	{
		std::cout << "\n\t\tMachin's card #" << 2 << '\n';
		printCard(cardsOfMachine[1]);
		for (int i = 2; summCardsOfMachine <= 26; ++i)
		{
			std::cout << "\n\tSumm of machine: " << summCardsOfMachine;
			if (summCardsOfMachine == summCardsOfGamer)
			{
				std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer;
				std::cout << "\n\t\t\tPUSH!!!";
				purse += bet;
				std::cout << "\n\tOkey. Take your loot back.";
				menu(deck, purse);
				break;
			}
			else if (summCardsOfMachine > 16)
			{
				if (summCardsOfGamer > summCardsOfMachine || summCardsOfMachine > 21)
				{
					std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer;
					purse += (2.5 * bet) + bet;
					std::cout << "\n\tOkey. You win: " << 2.5 * bet;
				}
				else 
				{
					std::cout << "\n\tYour summ of ranks: " << summCardsOfGamer;
					std::cout << "\n\tDude! you lost!";
				}
				menu(deck, purse);
				break;
			}
			else
			{
				cardsOfMachine[i] = { deckCardPtr[game++] };
				std::cout << "\n\tThe machine takes another card.";
				std::cout << "\n\t\tMachin's card #" << i+1 << '\n';
				printCard(cardsOfMachine[i]);
				summCardsOfMachine = { Summ(cardsOfMachine) };
			}
		}
	}
}


void createDeck(std::array<std::array<Card, 52>, 6> &deck)
{
	for (int d_deck = 0; d_deck < 6; ++d_deck)//Внешний уровень - колоды
	{
		int card{ 0 };//И только здесь начинаем отсчёт карт

		//Присваиваем облик одной карты
		for (int suit = 0; suit < SUIT_MAX; ++suit)
			for (int rank = 1; rank < RANK_MAX; ++rank)
			{
				deck[d_deck][card].suit = static_cast<CardSuit>(suit);
				deck[d_deck][card].rank = static_cast<CardRank>(rank);
				card++;
			}
	}
}
void menu(std::array<std::array<Card, 52>, 6> &deck, double &purse)
{
	std::cout << "\n\tDo you want to play?\tyes---y\t\tno---n\n\t\t\t\t\t   ";
	char answer = question(answer, 'y', 'n');
	if (answer == 'y')
	{
		shuffleDeck(deck);

		/*printDeck(deck);
		
		std::cout << '\n';
		printDeck(deck);
		*/
		playBlackjack(deck, purse);
	}
		
}

int main()
{
	Owl_san();

	std::cout << "\n\t\t------------------------------------------------------------\n\t\t\t╔══╗─╔╗───╔═══╗╔═══╗╔╗╔═╗     ──╔╗╔═══╗╔═══╗╔╗╔═╗\n\t\t 	║╔╗║─║║───║╔═╗║║╔═╗║║║║╔╝     ──║║║╔═╗║║╔═╗║║║║╔╝\n\t\t";
	std::cout << " 	║╚╝╚╗║║───║║─║║║║─╚╝║╚╝╝─     ──║║║║─║║║║─╚╝║╚╝╝─   + WHORES :)\n\t\t 	║╔═╗║║║─╔╗║╚═╝║║║─╔╗║╔╗║─     ╔╗║║║╚═╝║║║─╔╗║╔╗║─\n\t\t 	║╚═╝║║╚═╝║║╔═╗║║╚═╝║║║║╚╗     ║╚╝║║╔═╗║║╚═╝║║║║╚╗\n\t\t";
	std::cout << " 	╚═══╝╚═══╝╚╝─╚╝╚═══╝╚╝╚═╝     ╚══╝╚╝─╚╝╚═══╝╚╝╚═╝\n\t\t-------------------------------------------------------------\n\t\t\tby OwlSan -2019г\n\t\t";
	system("pause");
	
	
	std::cout << "\n\t\tHow much money are you willing to spend on gambling?\n\t\tMinimum rate - 100\t";
	double purse;
	money_f(purse);
	std::array<std::array<Card, 52>, 6> deck;//Создаём массив из 6 колод карт, в каждой из которых по 52 карты
	createDeck(deck);
	srand(static_cast<unsigned int>(time(0))); // устанавливаем значение системных часов в качестве стартового числа
	rand(); // если используете Visual Studio, сбрасываем первое сгенерированное рандомное число

	menu(deck, purse);
	std::cout << "\n\t\t\tYour balance is " << purse;
	return 0;
}


void Owl_san() 
{
	std::cout << "\n\n\t\t\t\t:)\\____/(:\n";
	std::cout << "\t\t\t\t  (@)v(@)\n";
	std::cout << "\t\t\t\t {|~- -~|}\n";
	std::cout << "\t\t\t\t {/^'^'^\\}\n";
	std::cout << "\t\t\t\t  ~~m-m~~\n\n\n";
}
